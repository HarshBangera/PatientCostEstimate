@page
@model PatientCostEstimate.Pages.CostEstimate.CostEstimateOutputModel
@{
    ViewData["Title"] = "Cost Estimate Output";
}

<div id="PrintDiv">

    <h1>Cost Estimate</h1>

    <div>
        <dl class="row">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Patient.PatientName)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Patient.PatientName)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Patient.Insurances.First().InsuranceProvider)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Patient.Insurances.First().InsuranceProvider)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Patient.Insurances.First().InsuranceID)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Patient.Insurances.First().InsuranceID)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Patient.Insurances.First().InsurancePlan)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Patient.Insurances.First().InsurancePlan)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Service.ServiceID)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Service.ServiceID)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Service.ServiceName)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Service.ServiceName)
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Service.Cost)
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.Service.Cost)
            </dd>
            <dt class="col-sm-2">
                Cost to be paid
            </dt>
            <dd class="col-sm-10">
                @Html.DisplayFor(model => model.CostForPatient)
            </dd>
        </dl>
    </div>

</div>

<div class="row">
    <a class="col-sm-2" asp-page="./Index">Get Cost Estimate</a>
    <button class="col-sm-2" onclick="javascript:printPDF();">Save as PDF</button> 
</div>

@section Scripts
{
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.min.js"></script>
        <script>
                function printPDF() {
                var pdf = new jsPDF('p', 'pt', 'letter');
                // source can be HTML-formatted string, or a reference
                // to an actual DOM element from which the text will be scraped.
                source = $('#PrintDiv')[0];

                // we support special element handlers. Register them with jQuery-style
                // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
                // There is no support for any other type of selectors
                // (class, of compound) at this time.
                specialElementHandlers = {
                    // element with id of "bypass" - jQuery style selector
                    '#bypassme': function (element, renderer) {
                        // true = "handled elsewhere, bypass text extraction"
                        return true
                    }
                };
                margins = {
                    top: 80,
                    bottom: 60,
                    left: 40,
                    width: 522
                };
                // all coords and widths are in jsPDF instance's declared units
                // 'inches' in this case
                pdf.fromHTML(
                    source, // HTML string or DOM elem ref.
                    margins.left, // x coord
                    margins.top, { // y coord
                    'width': margins.width, // max width of content on PDF
                    'elementHandlers': specialElementHandlers
                },

                    function (dispose) {
                        // dispose: object with X, Y of the last line add to the PDF
                        //          this allow the insertion of new lines after html
                        pdf.save('CostEstimate.pdf');
                    }, margins);
            }
        </script>
}
